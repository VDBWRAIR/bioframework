#!/usr/bin/env jip
#
# Simple pipeline to run cutadapt, bwa index, bwa mem, samtools view
#
# Usage:
#   simplepipe <input>... -r <reference> [--trimn] [--trimlq <trimlq>...] [--removebases <removebases>] [--indexqual <indexqual> --indexes <indexes>...] [-o <output>] [--interleave]
#
# Options:
#   -r, --reference=<reference>       Reference file to index and map to
#   --trimn                           Flag to indicate trimming of all N's from reads
#   --trimlq=<trimlq>...              The quality cutoff for the read trimming
#                                     [Default: 25,25]
#   --removebases=<removebases>       Number of bases to remove from ends of reads
#                                     See trim_reads --help for more details of -x
#                                     option
#   --indexqual=<indexqual>           The quality of the supplied read index files
#   --indexes=<indexes>               Index fastq files for fastq files
#                                     [Default: None]
#   -o, --output=<output>             The output bam file
#                                     [Default: mapped.bam]
# Help:
#  <input>  Input can be multiple fastq/sff files

#%begin validate
if options['indexqual'] and len(options['indexes'].value) != 2:
    validation_error("You must supply 2 index files when using --indexqual")
#%end

#%begin pipeline
# Convert format if needed
_inputs = []
for fq in options['input'].value:
    if fq.endswith('.sff'):
        outpath = basename(fq) + '.fastq'
        _x = run('convert_format', input=fq, output=outpath)
        _inputs.append(outpath)
    else:
        _inputs.append(fq)

if len(_inputs) > 1:
    output = run('paired_to_interleave', input=_inputs)
else:
    output = _inputs[0]

# Run index qual filter
if options['indexqual']:
    output = run(
        'interleaved_index_filter',
        input=output,
        index1=options['indexes'].value[0],
        index2=options['indexes'].value[1],
        minimum=options['indexqual']
    )

# Run general trimming
if options['trimn'] or options['trimlq'] or options['removebases']:
    output = run(
        'trim_reads',
        input=output,
        trim_n=options['trimn'],
        qualcutoff=options['trimlq'],
        removebases=options['removebases']
    )

# Map fastq to reference
refindex = run('bwa_index', input=options['reference'])
output = run(
    'bwa_mem',
    input=output,
    interleaved=True,
    reference=refindex
)

bash('cat', input=output)

#trimmed = run('cutadapt', input=fastq, qualcutoff=options['qualcutoff'], interleave=options['interleave'])
#index_ref = run('bwa_index', reference=options['reference'])
#sam = run('bwa_mem', reference=reference, fastq=trimmed)
#ubam = run('sam_to_bam', input=sam)
#bam = run('sort_bam', input=ubam, output=options['output'])
#run('plot_bam', input=bam, output=options['output']+'.svg', format='svg')

#index_ref >> sam

#%end
